<!DOCTYPE html>
<meta charset="utf-8">

<!-- Load d3.js -->
<script src="http://d3js.org/d3.v5.js"></script>
<script src="https://d3js.org/d3-scale-chromatic.v1.min.js"></script>
<script src="https://d3js.org/d3-geo-projection.v2.min.js"></script>


<!-- Create an element where the map will take place -->
<input type="text" id="myText" value="year">
<button onclick="myFunction()">Try it</button>
<p1></p1>
<svg id="my_dataviz" width="1700" height="875"></svg>

<script>
    // The svg
    var svg = d3.select("svg"),
      width = +svg.attr("width"),
      height = +svg.attr("height");
    
    // Map and projection
    var path = d3.geoPath();
    var projection = d3.geoMercator()
      .scale(175)
      .center([0,20])
      .translate([width/2, height/2]);
    
    // Data and color scale
    var internetData = d3.map();
    var nameData;
    var valueData;
    var topoData;

    var colorScale = d3.scaleThreshold()
      .domain([0, 1000000, 10000000, 25000000, 50000000, 75000000, 100000000, 500000000])
      .range(d3.schemeReds[9]);
    
    // Load external data and boot
    queue()
    async function queue() {
      topoData = await d3.json("https://raw.githubusercontent.com/holtzy/D3-graph-gallery/master/DATA/world.geojson")
      nameData = await d3.json("names.json")
      valueData = await d3.json("values.json")
      ready(null, topoData);
    }

    var x = 2016;
    function myFunction() {
      x = document.getElementById("myText").value;
      ready(null, topoData)
    }
    
    function ready(error, topo) {

      let mouseOver = function(d) {
        d3.selectAll(".Country")
          .transition()
          .duration(50)
          .style("opacity", .5)
        d3.select(this)
          .transition()
          .duration(50)
          .style("opacity", 1)
          .style("stroke", "black")
        
          //Tooltip - WIP
        try{
          tip.style("opacity", 1)
          .html(nameData[d.id] + " " + valueData[d.id][2016])
          .style("left", (d3.event.pageX-25) + "px")
          .style("top", (d3.event.pageY-75) + "px")
        }
        catch { 
           tip.style("opacity", 1)
            .html("No data avaliable")
            .style("left", (d3.event.pageX-25) + "px")
            .style("top", (d3.event.pageY-75) + "px")
        }

      }
    
      let mouseLeave = function(d) {
        d3.selectAll(".Country")
          .transition()
          .duration(50)
          .style("opacity", .8)
          .style("stroke", "grey")
        d3.select(this)
          .transition()
          .duration(50)
          .style("stroke", "grey")
          
          //Tooltip - WIP
          tip.style("opacity", 0)
      }

      // Define the div for the tooltip
      var tip = d3.select("p1").append("div")
      .attr("class", "tooltip")
      .style("opacity", 0)

      // Draw the map
      svg.append("g")
        .selectAll("path")
        .data(topo.features) //sets the "d" variable to be topo.features for this function
        .enter()
        .append("path")
          // draw each country
          .attr("d", d3.geoPath()
            .projection(projection)
          )
          
          // set the color of each country
          .attr("fill", function (d) {
            try {
              d.total = valueData[d.id][x]; //Using the id from topo.features to match entry in popValueData dictonary for pop value
              return colorScale(d.total);
            }
            catch {
              //Value is set to -1 if no data is found for that country
              d.total = -1
              return "#000000"
            }
          })

          .style("stroke", "grey")
          .attr("class", function(d){ return "Country" } )
          .style("opacity", .8)
          .on("mouseover", mouseOver )
          .on("mouseleave", mouseLeave )
        }
        
    
    </script>